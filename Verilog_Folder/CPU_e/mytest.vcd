$date
	Thu Dec  3 09:37:34 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPU_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module cpu $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 16 # result [15:0] $end
$var wire 8 $ pc_addr [7:0] $end
$var wire 16 % outB [15:0] $end
$var wire 16 & outA [15:0] $end
$var wire 16 ' inst [15:0] $end
$var wire 1 ( alu_op $end
$var wire 1 ) WE $end
$scope module alu $end
$var wire 16 * in2 [15:0] $end
$var wire 16 + in1 [15:0] $end
$var wire 1 ( alu_op $end
$var reg 16 , Z [15:0] $end
$upscope $end
$scope module ctl $end
$var wire 7 - opCode [6:0] $end
$var reg 1 ) WE $end
$var reg 1 ( alu_op $end
$upscope $end
$scope module insMem $end
$var wire 16 . inst [15:0] $end
$var wire 8 / addr [7:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 8 0 pc [7:0] $end
$upscope $end
$scope module regs $end
$var wire 1 ) WE $end
$var wire 3 1 addrA [2:0] $end
$var wire 3 2 addrB [2:0] $end
$var wire 1 ! clk $end
$var wire 3 3 inAddr [2:0] $end
$var wire 16 4 inData [15:0] $end
$var wire 16 5 outA [15:0] $end
$var wire 16 6 outB [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
x(
bx '
bx &
bx %
bx $
bx #
1"
0!
$end
#5
b1 #
b1 ,
b1 4
1(
1)
b10 3
b1 %
b1 *
b1 6
b1 2
b0 &
b0 +
b0 5
b0 1
b1 -
b1000001010 '
b1000001010 .
b0 $
b0 /
b0 0
1!
#10
0!
0"
#15
b100 #
b100 ,
b100 4
b100 3
b11 %
b11 *
b11 6
b11 2
b1 &
b1 +
b1 5
b10 1
b1010011100 '
b1010011100 .
b1 $
b1 /
b1 0
1!
#20
0!
#25
b0x #
b0x ,
b0x 4
0(
0)
bx 3
bx %
bx *
bx 6
bx 2
bx &
bx +
bx 5
bx 1
bx -
bx '
bx .
b10 $
b10 /
b10 0
1!
#30
0!
#35
b11 $
b11 /
b11 0
1!
#40
